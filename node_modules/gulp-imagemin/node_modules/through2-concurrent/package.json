{
  "name": "through2-concurrent",
  "version": "0.3.1",
  "description": "Like through2 except runs in parallel with limited concurrency",
  "main": "through2-concurrent.js",
  "files": [
    "through2-concurrent.js"
  ],
  "scripts": {
    "test": "mocha tests.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/almost/through2-concurrent"
  },
  "keywords": [
    "through2",
    "streams",
    "streams2",
    "through",
    "transform",
    "concurrency",
    "parallel"
  ],
  "author": {
    "name": "Thomas Parslow",
    "email": "tom@almostobsolete.net",
    "url": "http://almostobsolete.net/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/almost/through2-concurrent/issues"
  },
  "devDependencies": {
    "expect.js": "^0.3.1",
    "mocha": "^1.21.4",
    "underscore": "^1.7.0"
  },
  "dependencies": {
    "through2": "^0.6.3"
  },
  "readme": "through2-concurrent\n===================\n\n[![NPM](https://nodei.co/npm/through2-concurrent.png?downloads&downloadRank)](https://nodei.co/npm/through2-concurrent/)\n\nA simple way to create a Node.JS Transform stream which processes in\nparallel. You can limit the concurrency (default is 16) and order is\n*not* preserved (so chunks/objects can end up in a different order to\nthe order they started in if the transform functions take different\namounts of time).\n\nBuild using [through2](https://github.com/rvagg/through2) and has the\nsame API with the exception of an extra `maxConcurrency` option.\n\nNon-`objectMode` streams are supported for completeness but I'm not\nsure they'd be useful for anything.\n\nWritten by Thomas Parslow\n([almostobsolete.net](http://almostobsolete.net) and\n[tomparslow.co.uk](http://tomparslow.co.uk)) as part of Active Inbox\n([activeinboxhq.com](http://activeinboxhq.com/)).\n\n[![Build Status](https://travis-ci.org/almost/through2-concurrent.svg)](https://travis-ci.org/almost/through2-concurrent)\n\n\nInstall\n-------\n\n```bash\nnpm install --save through2-concurrent\n```\n\nExamples\n--------\n\nProcess lines from a CSV in paralel. The order the results end up in\nthe \"all\" is not deterministic.\n\n```javascript\nvar through2Concurrent = require('through2-concurrent');\n\nvar all = [];\n\nfs.createReadStream('data.csv')\n  .pipe(csv2())\n  .pipe(through2Concurrent.obj(\n    {maxConcurrency: 10},\n    function (chunk, enc, callback) {\n      var self = this;\n      someThingAsync(chunk, function (newChunk) {\n        self.push(newChunk);\n      });\n  }))\n  .on('data', function (data) {\n    all.push(data)\n  })\n  .on('end', function () {\n    doSomethingSpecial(all)\n  })\n```\n\n\nContributing\n------------\n\nFixed or improved stuff? Great! Send me a pull request [through GitHub](http://github.com/almost/through2-concurrent)\nor get in touch on Twitter [@almostobsolete][#tom-twitter] or email at tom@almostobsolete.net\n\n[#tom]: http://www.almostobsolete.net\n[#tom-twitter]: https://twitter.com/almostobsolete\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/almost/through2-concurrent",
  "_id": "through2-concurrent@0.3.1",
  "dist": {
    "shasum": "9e3f939fd755fc6c971ef7ac9d8a31ca02f5bdf9"
  },
  "_from": "through2-concurrent@^0.3.0",
  "_resolved": "https://registry.npmjs.org/through2-concurrent/-/through2-concurrent-0.3.1.tgz"
}
