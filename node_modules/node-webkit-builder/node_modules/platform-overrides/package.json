{
  "name": "platform-overrides",
  "version": "1.0.1",
  "description": "Allows you to specify platform-specific manifest values. Work with JSON or plain objects. ",
  "main": "index.js",
  "scripts": {
    "test": "gulp test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/adam-lynch/platform-overrides.git"
  },
  "homepage": "https://github.com/adam-lynch/platform-overrides",
  "bugs": {
    "url": "https://github.com/adam-lynch/platform-overrides/issues"
  },
  "author": {
    "name": "Adam Lynch",
    "email": "contact@adamlynch.com"
  },
  "license": "MIT",
  "devDependencies": {
    "coffee-script": "~1.8.0",
    "gulp": "~3.8.9",
    "gulp-coffee": "~2.2.0",
    "gulp-load-plugins": "~0.7.0",
    "gulp-mocha": "~1.1.1",
    "chai": "~1.9.2",
    "gulp-rename": "~1.2.0"
  },
  "dependencies": {
    "lodash": "~2.4.1"
  },
  "readme": "platform-overrides \r\n==========\r\n\r\n[![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Windows Build Status][appveyor-image]][appveyor-url] [![Dependency Status][depstat-image]][depstat-url] \r\n\r\n---\r\n\r\nApply platform-specific manifest values. Works with JSON or plain objects. \r\n                     \r\nThe platform-specific options will override the others only when \"building\" for that platform and the `platformOverrides` property will be removed.\r\n\r\nThis was originally created with [node-webkit](http://github.com/rogerwang/node-webkit) in mind.\r\n\r\nNeed a Gulp plugin? See [gulp-platform-overrides](http://github.com/adam-lynch/gulp-platform-overrides).\r\n\r\n## Installation\r\n\r\n```shell\r\nnpm install platform-overrides\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar platformOverrides = require('platform-overrides');\r\n\r\nvar result = platformOverrides({\r\n        options: '{\"a\": 0, \"platformOverrides\": { \"osx\": { \"a\": 1 } } }',\r\n        platform: 'osx' // auto-detects a platform if omitted\r\n    }, function(err, result){\r\n        if(err) //...\r\n\r\n        // result will be a JSON string but the \"a\" property will contain 1 now\r\n    });\r\n```\r\n\r\n\r\n## API\r\n\r\n`platformOverrides(options, callback)`\r\n\r\n**Returns** an Object or String, depending on the type of the `options` property you passed.\r\n\r\n### Options\r\n\r\n#### options\r\nObject or String. (i.e. `options.options`)\r\n\r\n#### platform\r\n(Optional) String. One of the following: [osx, osx32, osx64, win, win32, win64, linux, linux32, linux64].\r\n\r\nIf not passed, the current platform is detected (the auto-detected platform is always an architecture-specific one (i.e. has `32` / `64` on the end).\r\n\r\nSee [Examples](#examples) for how this parameter effects the behaviour of this plugin.\r\n\r\nNote: `osx` is not `mac` just for the sake of backwards compatibility with [node-webkit-builder](https://github.com/mllrsohn/node-webkit-builder).\r\n\r\n\r\n### Callback\r\n\r\nFunction called on completion with error and result arguments; e.g. `function(err, result){}`\r\n\r\n## Examples\r\n\r\nExample manifest:\r\n\r\n```json\r\n{\r\n  \"name\": \"nw-demo\",\r\n  \"version\": \"0.1.0\",\r\n  \"main\": \"index.html\",\r\n  \"window\": {\r\n      \"frame\": false,\r\n      \"toolbar\": false\r\n  },\r\n  \"platformOverrides\": {\r\n      \"win\": {\r\n          \"window\": {\r\n              \"frame\": true\r\n          }\r\n      },\r\n      \"osx64\": {\r\n          ...\r\n      },\r\n      ...\r\n  }\r\n}\r\n``` \r\n\r\nFor example, when building for Windows (passing `win` as the platform or not passing a platform on a Windows machine), the manifest generated and put into the end app (from the manifest above) would be:\r\n\r\n```json\r\n{\r\n    \"name\": \"nw-demo\",\r\n    \"version\": \"0.1.0\",\r\n    \"main\": \"index.html\",\r\n    \"window\": {\r\n        \"frame\": true,\r\n        \"toolbar\": false\r\n    }\r\n}\r\n```\r\n\r\n### Architecture-agnostic\r\n\r\nExample manifest:\r\n\r\n```json\r\n{\r\n  \"name\": \"nw-demo\",\r\n  \"platformOverrides\": {\r\n      \"win\": {\r\n          \"name\": \"hello\"\r\n      },\r\n      \"win32\": {\r\n          \"name\": \"world\"\r\n      },\r\n      \"win64\": {\r\n          \"name\": \"like\"\r\n      }\r\n      ...\r\n  }\r\n}\r\n```\r\n\r\nIf `win` is passed as the platform, then only `win` is applied and `win32` & `win64` are ignored;\r\n\r\n```json\r\n{\r\n    \"name\": \"hello\"\r\n}\r\n```\r\n\r\n\r\n### Specificity & Cascading\r\n\r\n\r\nExample manifest:\r\n\r\n```json\r\n{\r\n  \"name\": \"nw-demo\",\r\n  \"version\": \"0.1\",\r\n  \"platformOverrides\": {\r\n      \"win\": {\r\n          \"name\": \"hello\",\r\n          \"version\": \"0.2\"\r\n      },\r\n      \"win32\": {\r\n          \"version\": \"0.3\"\r\n      },\r\n      \"win64\": {\r\n          \"name\": \"like\"\r\n      }\r\n      ...\r\n  }\r\n}\r\n```\r\n\r\nIf `win32` is passed as the platform (or `win32` is auto-detected), then `win` is applied first, then `win32`;\r\n\r\n```json\r\n{\r\n      \"name\": \"hello\",\r\n      \"version\": \"0.3\"\r\n}\r\n```\r\n\r\nEven if there is no `win32`, then the `win` platform overrides will still be applied.\r\n\r\n## Contributing\r\n\r\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\r\n\r\n[npm-url]: https://npmjs.org/package/platform-overrides\r\n[npm-image]: http://img.shields.io/npm/v/platform-overrides.svg?style=flat\r\n\r\n[travis-url]: http://travis-ci.org/adam-lynch/platform-overrides\r\n[travis-image]: http://img.shields.io/travis/adam-lynch/platform-overrides.svg?style=flat\r\n\r\n[appveyor-url]: https://ci.appveyor.com/project/adam-lynch/platform-overrides/branch/master\r\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/iomo0qtm5k59jyw9/branch/master?svg=true\r\n\r\n[depstat-url]: https://david-dm.org/adam-lynch/platform-overrides\r\n[depstat-image]: https://david-dm.org/adam-lynch/platform-overrides.svg?style=flat\r\n",
  "readmeFilename": "README.md",
  "_id": "platform-overrides@1.0.1",
  "_from": "platform-overrides@~1.0.1"
}
